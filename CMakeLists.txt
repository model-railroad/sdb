cmake_minimum_required(VERSION 3.26)
project(SDB)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# All gcc flags parsed from build/compile_commands.json generated by arduino-cli
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHAVE_CONFIG_H")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DMBEDTLS_CONFIG_FILE=mbedtls/esp_config.h")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUNITY_INCLUDE_CONFIG_H")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_POSIX")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_GNU_SOURCE")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DIDF_VER=v4.4.3")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DESP_PLATFORM")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_POSIX_READER_WRITER_LOCKS")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHAVE_CONFIG_H")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mlongcalls")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-frame-address")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffunction-sections")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdata-sections")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=unused-function")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=unused-variable")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=deprecated-declarations")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-sign-compare")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -freorder-blocks")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wwrite-strings")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstack-protector")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstrict-volatile-bitfields")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=unused-but-set-variable")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-jump-tables")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-tree-switch-conversion")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fexceptions")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -MMD")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -c")        # compile, do not link
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w")       # inhibit all warnings
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Os")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DF_CPU=240000000L")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DARDUINO=10607")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DARDUINO_heltec_wifi_kit_32")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DARDUINO_ARCH_ESP32")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DARDUINO_BOARD=heltec_wifi_kit_32")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DARDUINO_VARIANT=heltec_wifi_kit_32")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DARDUINO_PARTITION_default")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DESP32")

# Force the .ino file to be treated as C++
set_source_files_properties(${PROJECT_SOURCE_DIR}/my_project.ino
        PROPERTIES LANGUAGE CXX
)
set_source_files_properties(${PROJECT_SOURCE_DIR}/my_project.ino
        PROPERTIES COMPILE_FLAGS "-x c++"
)

add_library(SDB
        ${PROJECT_SOURCE_DIR}/sdb.ino
)

set_target_properties(SDB PROPERTIES LINKER_LANGUAGE CXX)

target_include_directories(SDB PUBLIC
        ${PROJECT_SOURCE_DIR}/src
        ${PROJECT_SOURCE_DIR}/src/html
)
